# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := server
DEFS_Debug := \
	'-DHTTP_PARSER_STRICT=0' \
	'-DLINUX' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-D_POSIX_C_SOURCE=200112' \
	'-DDEBUG'

# Flags passed to all source files.
CFLAGS_Debug := \
	-g \
	-O0 \
	-std=c++1y \
	-g \
	-O0 \
	-std=c++1y

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug :=

INCS_Debug := \
	-I$(srcdir)/deps/nodeuv-uri \
	-I$(srcdir)/deps/libuv/include \
	-I$(srcdir)/deps/http-parser 

DEFS_Release := \
	'-DHTTP_PARSER_STRICT=0' \
	'-DLINUX' \
	'-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-D_POSIX_C_SOURCE=200112' \
	'-DNDEBUG'

# Flags passed to all source files.
CFLAGS_Release := \
	-O3 \
	-std=c++1y \
	-fstrict-aliasing \
	-fomit-frame-pointer \
	-fdata-sections \
	-ffunction-sections \
	-fPIC \
	-O3 \
	-std=c++1y \
	-fstrict-aliasing \
	-fomit-frame-pointer \
	-fdata-sections \
	-ffunction-sections \
	-fPIC \
	-Wno-narrowing
# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release :=

INCS_Release := \
	-I$(srcdir)/deps/nodeuv-uri \
	-I$(srcdir)/deps/libuv/include \
	-I$(srcdir)/deps/http-parser \
	-I/home/xingw/rv/nodeuv-http/incs

OBJS := \
	$(obj).target/$(TARGET)/src/http.o \
	$(obj).target/$(TARGET)/src/http-server.o \
	$(obj).target/$(TARGET)/examples/server.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our dependencies are built before any of us.
$(OBJS): | $(obj).target/deps/libuv/libuv.a $(obj).target/deps/http-parser/libhttp_parser.a $(obj).target/libnodeuv-http.a

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := \
	-pthread

LDFLAGS_Release := \
	-pthread

LIBS := \
	-lm \
	-ldl \
	-lrt 

$(builddir)/server: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/server: LIBS := $(LIBS)
$(builddir)/server: LD_INPUTS := $(OBJS) $(obj).target/deps/libuv/libuv.a $(obj).target/deps/http-parser/libhttp_parser.a $(obj).target/libnodeuv-http.a \
	../../lib/libhiredis.a \
	../../lib/libcurl.a \
	../../lib/libz.a \
	../../lib/lib_acl.a \
	../../lib/lib_protocol.a \
	../../lib/lib_acl_cpp.a

$(builddir)/server: TOOLSET := $(TOOLSET)
$(builddir)/server: $(OBJS) $(obj).target/deps/libuv/libuv.a $(obj).target/deps/http-parser/libhttp_parser.a $(obj).target/libnodeuv-http.a FORCE_DO_CMD
	$(call do_cmd,link)

all_deps += $(builddir)/server
# Add target alias
.PHONY: server
server: $(builddir)/server

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/server

